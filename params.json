{"name":"Yard-Cucumber","body":"YARD-Cucumber: A Requirements Documentation Tool\r\n====================================\r\n\r\nSynopsis\r\n--------\r\n\r\nYARD-Cucumber (formerly Cucumber-In-The-Yard) is a YARD extension that processes\r\nCucumber features, scenarios, steps, tags, step definitions, and even transforms \r\nto provide documentation similar to what you expect to how YARD displays classes, \r\nmethods and constants.This tools bridges the gap of having feature files found in\r\nyour source code and true documentation that your team, product owners and\r\nstakeholders can use.\r\n\r\nExamples\r\n--------\r\n\r\nI have created a trivial, example project to help provide a quick \r\nvisualization of the resulting documentation. I encourage you to look at it as \r\nan example and see if it would assist your project from a multitude of \r\nperspectives: as the project's core developer; another developer or a new \r\ndeveloper; quality assurance engineer; or product owner/stakeholder.\r\n\r\nThe implemented example has been deployed at [http://recursivegames.com/cukes/](http://recursivegames.com/cukes/).\r\n\r\n**1. View Features and Scenarios** [example](http://recursivegames.com/cukes/requirements.html)\r\n\r\n**2. Search through [features, scenarios](http://recursivegames.com/cukes/feature_list.html), and [tags](http://recursivegames.com/cukes/tag_list.html)**\r\n\r\n**3. Dynamic Tag Unions and Intersections** [example](http://recursivegames.com/cukes/requirements/tags.html)\r\n\r\n**4. View all features and scenarios by tag** [example](http://recursivegames.com/cukes/requirements/tags/bvt.html)\r\n\r\n**5. View Step Definitions and Transforms** [example](http://recursivegames.com/cukes/requirements/step_transformers.html)\r\n\r\n**6. All steps [matched](http://recursivegames.com/cukes/requirements/step_transformers.html#definition_5-stepdefinition) to step definitions**\r\n\r\n**7. [Steps](http://recursivegames.com/cukes/requirements/step_transformers.html#step_transform7-steptransform) that have transforms applied to them**\r\n\r\n**8. [Undefined steps](http://recursivegames.com/cukes/requirements/step_transformers.html#undefined_steps) and even [Rubular](http://rubular.com/) links of your step definitions.**\r\n\r\n**9. Feature directories with a README.md will be parsed into the description** [example](http://recursivegames.com/cukes/requirements/example/child_feature.html)\r\n\r\n**10. Configurable Menus - want a searchable steps menu and remove the tags menu**\r\n\r\n**11. Step definitions in your language (Ruby 1.9.2 - Internationalization)**\r\n\r\nInstallation\r\n------------\r\n\r\nYARD-Cucumber requires the following gems installed:\r\n\r\nGherkin 2.2.9 - http://cukes.info\r\nCucumber 0.7.5 - http://cukes.info\r\nYARD 0.7.0 - http://yardoc.org\r\n\r\nTo install `yard-cucumber` use the following command:\r\n\r\n    $ gem install yard-cucumber\r\n\r\n(Add `sudo` if you're installing under a POSIX system as root)\r\n\r\nUsage\r\n-----\r\n\r\nYARD supports for automatically including gems with the prefix `yard-` \r\nas a plugin. To enable automatic loading yard-cucumber. \r\n\r\n    $ mkdir ~/.yard\r\n    $ yard config load_plugins true\r\n    $ yardoc 'example/**/*.rb' 'example/**/*.feature'\r\n\r\nNow you can run YARD as you [normally](https://github.com/lsegal/yard) would and \r\nhave your features, step definitions and transforms captured.\r\n\r\nAn example with the rake task:\r\n\r\n    require 'yard'\r\n\r\n    YARD::Rake::YardocTask.new do |t|\r\n    t.files   = ['features/**/*.feature', 'features/**/*.rb']\r\n    t.options = ['--any', '--extra', '--opts'] # optional\r\n    end\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\n* Adding or Removing search fields (yardoc)\r\n\r\nBe default the yardoc output will generate a search field for features and tags.\r\nThis can be configured through the yard configuration file `~/.yard/config` to\r\nadd or remove these search fields.\r\n  \r\n    --- !map:SymbolHash \r\n    :load_plugins: true\r\n    :ignored_plugins: []\r\n\r\n    :autoload_plugins: []\r\n\r\n    :safe_mode: false\r\n    \r\n    :\"yard-cucumber\": \r\n      menus: [ 'features', 'tags', 'steps', 'step definitions' ]\r\n\r\n\r\nBy default the configuration, yaml format, that is generate by the `yard config` \r\ncommand will save a `SymbolHash`. You can still edit this file add the entry for \r\n`:\"yard-cucumber\":` and the sub-entry `menus:` which can contain all of the above\r\nmentioned menus or simply an empty array `[]` if you want no additional menus.\r\n\r\n* Step definitions in your language (Ruby 1.9.2)\r\n\r\nAgain the yard configuration file you can define additional step definitions that\r\ncan be matched.\r\n\r\n    :\"yard-cucumber\": \r\n      language: \r\n        step_definitions: [ 'Given', 'When', 'Then', 'And', 'Soit', 'Etantdonn√©', 'Lorsque', 'Lorsqu', 'Alors', 'Et' ]\r\n\r\nIn this example, I have included the French step definition words alongside the\r\nEnglish step definitions. Even without specifying this feature files in other\r\nlanguages are found, this provides the ability for the step definitions to match\r\ncorrectly to step definitions.\r\n\r\nDetails\r\n--------\r\n\r\nThere are two things that I enjoy: a test framework written in my own Domain\r\nSpecific Language (DSL) that is easily understood by all those on a project\r\nand the ability for all participants to easily read, search, and view the tests.\r\n\r\nCucumber is an amazing tool that allowed me to define exercisable requirements. \r\nMy biggest obstacle was bringing these requirements to my team, the product\r\nowner, and other stakeholders.\r\n\r\nInitially I tried to expose more of the functionality by providing freshly\r\nauthored requirements through email, attachments to JIRA tickets, or linked in\r\nwiki documents. None of these methods were very sustainable or successful. \r\nFirst, I was continually pushing out the documents to those interested. \r\nSecond, the documents were displayed to the user in text without the syntax\r\nhighlighting that was exceedingly helpful for quickly understanding the requirements.\r\n\r\nI also found it hard to share the test framework that I had put together with\r\nanother developer that joined the team. It was difficult to direct them around\r\nthe features, tags, step definitions, and transforms. It was when I started to \r\nconvey to them the conventions that I had established that I wished I had a\r\ntool that would allow me to provide documentation like one would find generated \r\nby a great tool like YARD.\r\n\r\nSo I set out to integrate Cucumber objects like features, backgrounds, \r\nscenarios, tags, steps, step definitions, and transforms into a YARD template.\r\nFrom my quick survey of the landscape I can see that the my needs are\r\ndifferent than a lot of others that use Cucumber.  The entire project that\r\nspawned this effort was solely to exercise the functionality of a different,\r\nlarge project and so there is a huge dependence on having the requirements\r\ndocumented.  This is in contrast to other projects that are using this on a\r\nsmall scale to test the functionality of small software component.  Though,\r\nultimately, I realized that the functionality may provide a valuable tool for\r\nmany as I feel it helps more solidly bridge the reporting of the documentation\r\nby putting a coat of paint on it.\r\n\r\n\r\nLICENSE\r\n-------\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 Franklin Webber\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"YARD extension that adds Cucumber Features, Tags, and Step Definitions","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}